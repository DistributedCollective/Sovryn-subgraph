type ExampleEntity @entity {
  id: ID!
  count: BigInt!
  owner: Bytes! # address
  spender: Bytes! # address
}

type Transaction @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas used during txn execution
  # gasUsed: BigInt!
  gasPrice: BigInt!
  # tx index
  index: BigInt!
  from: Bytes!
  to: Bytes
  value: BigInt!
  gasLimit: BigInt!
}

type User @entity {
  id: ID! # address
  numSwaps: Int!
  swaps: [Swap!]
  # tokenSwapTotals: [UserTokenSwapTotal!]
  # smartTokenBalances: [UserSmartTokenBalance!]
  # liquidityProvided: [LiquidityProvided]
}

type Token @entity {
  id: ID! #address
  name: String!
  symbol: String!
  decimals: Int!
  converters: [LiquidityPool!] #TODO: Change to Converter entity when implemented
  owner: Bytes!
  pathToBtc: [LiquidityPool!]
  pathToUsd: [LiquidityPool!]
  # tokenSwapTotals: [TokenSwapTotals!]
  lastPriceBtc: BigInt! # TODO: Change to big decimal
  lastPriceUsd: BigInt! # TODO: Change to big decimal
  # marketCap: BigInt!
  # circulatingSupply: BigInt!
}

type Swap @entity {
  id: ID! # transaction hash of the swap
  ammConversionEvents: [Conversion!]
  fromToken: Bytes! #TODO: Change to Token entity
  toToken: Bytes! #TODO: Change to Token entity
  fromAmount: BigInt!
  toAmount: BigInt!
  rate: BigInt! # TODO: Make this a BigDecimal
  user: User! # TODO: Change to User entity
  isMarginTrade: Boolean!
  isBorrow: Boolean!
  timestamp: BigInt!
}

type LiquidityPool @entity {
  id: ID!
  type: Int!
  smartToken: [Bytes!] # TODO: Change to SmartToken
  underlyingAssets: [Token!]
  poolTokens: [String!]
  owner: Bytes!
  manager: Bytes!
  anchor: Bytes!
  conversionFee: BigDecimal!
  hasRBTCReserve: Boolean!
  maxConversionFee: BigDecimal!
  reserveRatio: Int!
  activated: Boolean!
  numSwaps: BigInt!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransaction: Transaction!
  lastPrice: BigDecimal!
  lastPriceInverted: BigDecimal!
  # OTHER FIELDS TO ADD HERE
}


#### GENERATED BY SCAFFOLD SCRIPT - Add any custom entities before this line

type OwnerUpdate @entity {
  id: ID!
  _prevOwner: Bytes! # address
  _newOwner: Bytes! # address
  timestamp: BigInt!
  emittedBy: Bytes! #address
  transaction: Transaction!
}
type NewConverter @entity {
  id: ID!
  _type: Int! # uint16
  _converter: Bytes! # address
  _owner: Bytes! # address
  timestamp: BigInt!
    transaction: Transaction!
}

type ConverterAnchorAdded @entity {
  id: ID!
  _anchor: Bytes! # address
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type ConverterAnchorRemoved @entity {
  id: ID!
  _anchor: Bytes! # address
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type LiquidityPoolAdded @entity {
  id: ID!
  _liquidityPool: Bytes! # address
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type LiquidityPoolRemoved @entity {
  id: ID!
  _liquidityPool: Bytes! # address
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type ConvertibleTokenAdded @entity {
  id: ID!
  _convertibleToken: Bytes! # address
  _smartToken: Bytes! # address
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type ConvertibleTokenRemoved @entity {
  id: ID!
  _convertibleToken: Bytes! # address
  _smartToken: Bytes! # address
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type SmartTokenAdded @entity {
  id: ID!
  _smartToken: Bytes! # address
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type SmartTokenRemoved @entity {
  id: ID!
  _smartToken: Bytes! # address
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type PriceDataUpdate @entity {
  id: ID!
  _connectorToken: Bytes! # address
  _tokenSupply: BigInt! # uint256
  _connectorBalance: BigInt! # uint256
  _connectorWeight: BigInt! # uint32
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type LiquidityAdded @entity {
  id: ID!
  _provider: Bytes! # address
  _reserveToken: Bytes! # address
  _amount: BigInt! # uint256
  _newBalance: BigInt! # uint256
  _newSupply: BigInt! # uint256
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type LiquidityRemoved @entity {
  id: ID!
  _provider: Bytes! # address
  _reserveToken: Bytes! # address
  _amount: BigInt! # uint256
  _newBalance: BigInt! # uint256
  _newSupply: BigInt! # uint256
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type Activation @entity {
  id: ID!
  _type: Int! # uint16
  _anchor: Bytes! # address
  _activated: Boolean! # bool
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type Conversion @entity {
  id: ID!
  _fromToken: Bytes! # address
  _toToken: Bytes! # address
  _trader: Bytes! # address
  _amount: BigInt! # uint256
  _return: BigInt! # uint256
  _conversionFee: BigInt! # int256
  _protocolFee: BigInt! # int256
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type TokenRateUpdate @entity {
  id: ID!
  _token1: Bytes! # address
  _token2: Bytes! # address
  _rateN: BigInt! # uint256
  _rateD: BigInt! # uint256
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type ConversionFeeUpdate @entity {
  id: ID!
  _prevFee: BigInt! # uint32
  _newFee: BigInt! # uint32
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type WithdrawFees @entity {
  id: ID!
  sender: Bytes! # address
  receiver: Bytes! # address
  token: Bytes! # address
  protocolFeeAmount: BigInt! # uint256
  wRBTCConverted: BigInt! # uint256
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}

type DynamicFeeFactorUpdate @entity {
  id: ID!
  _prevFactor: BigInt! # uint256
  _newFactor: BigInt! # uint256
  timestamp: BigInt!
    emittedBy: Bytes! #address
    transaction: Transaction!
}
