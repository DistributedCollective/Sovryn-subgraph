"""
This entity stores one User's history of adding and removing liquidity from one AMM pool
"""
type UserLiquidityHistory @entity {
  """
  The ID is userAddress + '-' + smartToken
  Liquidity Pool address is not used here because when a liquidity pool is updated the address changes, but the smart token address remains the same.
  """
  id: ID!
  user: User!
  """
  This is the pool token (sometimes called smart token), not the liquidity pool address
  """
  poolToken: PoolToken!
  """
  Asset0 is defined on the LiquidityPool.
  These totals are amounts added and removed over all time. These values are used to calculate a user's PnL from liquidity provision.
  """
  totalAsset0LiquidityAdded: BigDecimal!
  totalAsset0LiquidityRemoved: BigDecimal!
  """
  Asset1 is defined on the LiquidityPool
  These totals are amounts added and removed over all time. These values are used to calculate a user's PnL from liquidity provision.
  """
  totalAsset1LiquidityAdded: BigDecimal!
  totalAsset1LiquidityRemoved: BigDecimal!
  """
  Granular transaction history for transactions adding or removing liquidity from an AMM pool
  """
  liquidityHistory: [LiquidityHistoryItem!] @derivedFrom(field: "userLiquidityHistory")
}

enum LiquidityHistoryType {
  Added
  Removed
}

type LiquidityHistoryItem @entity {
  """
  ID is transaction hash + log index
  """
  id: ID!
  user: User!
  """
  Foreign key to join this transaction to the parent UserLiquidityHistory entity
  """
  userLiquidityHistory: UserLiquidityHistory!
  """
  Type is either Added or Removed (if a user added or removed liquidity from the pool)
  """
  type: LiquidityHistoryType! # Added or removed
  """
  Provider is either the user, or a contract if the user interacted with a proxy contract
  """
  provider: String! # address
  """
  The underlying asset (ERC20 token) that was added/removed
  """
  reserveToken: Token! # address
  """
  The amount that was added/removed
  """
  amount: BigDecimal! # uint256
  """
  New balance of the reserveToken (ERC20 token) on the AMM pool
  """
  newBalance: BigDecimal! # uint256
  """
  New total supply of pool tokens
  """
  newSupply: BigDecimal! # uint256
  timestamp: Int!
  """
  AMM pool that liquidity was provided to
  """
  liquidityPool: LiquidityPool!
  """
  The contract that emitted this event (primarily used for debugging)
  """
  emittedBy: String! #address
  transaction: Transaction!
}