
"""
This entity contains the history, fees and totals regarding one users' SOV rewards
"""
type UserRewardsEarnedHistory @entity {
  id: ID! # user
  user: User!
  """
  This is the total of all EarnReward and RewardClaimed events
  """
  totalFeesAndRewardsEarned: BigDecimal!
  """
  This is incremented by EarnReward events, and set to 0 by TokensStaked events on the LockedSOV contract
  """
  availableTradingRewards: BigDecimal!
  """
  This is incremented by EarnReward and RewardClaimed events, and set to 0 by RewardWithdrawn events
  """
  availableRewardSov: BigDecimal!
  rewardsEarnedHistory: [RewardsEarnedHistoryItem!] @derivedFrom(field: "user")
}

enum RewardsEarnedAction {
  StakingRewardWithdrawn
  EarnReward
  RewardClaimed
  RewardSovStaked
}

type RewardsEarnedHistoryItem @entity {
  id: ID! # transaction hash
  action: RewardsEarnedAction!
  user: UserRewardsEarnedHistory!
  token: Token
  amount: BigDecimal!
  timestamp: Int!
  transaction: Transaction!
}

"""
This entity will have only one instance (id: 0), and will hold global variables required for liquidity mining rewards calculations
"""
type LiquidityMiningGlobal @entity {
  id: ID! # ID will be 0
  totalAllocationPoint: BigInt!
  totalRewardPerBlock: BigInt!
}

type LiquidityMiningAllocationPoint @entity {
  id: ID! # token address
  allocationPoint: BigInt!
  """
  Calculated as (totalRewardPerBlock * allocationPoint) / totalAllocationPoint
  """
  rewardPerBlock: BigDecimal!
  ammPoolToken: SmartToken
  lendingPoolToken: LendingPool
  poolTokenAddedTimestamp: Int!
  poolTokenUpdatedTImestamp: Int!
  poolTokenAddedBlock: Int!
  poolTokenUpdatedBlock: Int!
}