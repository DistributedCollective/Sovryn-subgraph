
"""
This entity contains the history, fees and totals regarding one users' SOV rewards
"""
type UserRewardsEarnedHistory @entity {
  id: ID! # user
  user: User!
  """
  This is the total of all EarnReward and RewardClaimed events
  """
  totalFeesAndRewardsEarned: BigDecimal!
  """
  SOV rewards earned from margin trading, but not yet claimed and vested
  Incremented by EarnReward events, and set to 0 by TokensStaked events on the LockedSOV contract
  """
  availableTradingRewards: BigDecimal!
  """
  Sum of all SOV rewards earned from margin trading.
  Incremented by EarnReward events
  """
  totalTradingRewards: BigDecimal!
  """
  Granular events for transaction where a reward is earned
  """
  rewardsEarnedHistory: [RewardsEarnedHistoryItem!] @derivedFrom(field: "user")
}

enum RewardsEarnedAction {
  """
  When a SOV Staker withdraws their liquid SOV reward for staking
  """
  StakingRewardWithdrawn
  """
  SOV reward earned when a user margin trades or one of their trades is rolled over.
  The reward is a percentage of the trading fee, paid in SOV.
  """
  EarnReward
  """
  When a user claims a liquidity mining reward
  """
  RewardClaimed
  """
  When SOV is staked by a Rewards vesting contract (eg after it has been claimed by the user)
  """
  RewardSovStaked
  """
  When an SOV Staker withdraws their share of the fees earned by the Protocol
  """
  UserFeeWithdrawn
}

type RewardsEarnedHistoryItem @entity {
  id: ID! # transaction hash
  action: RewardsEarnedAction!
  user: UserRewardsEarnedHistory!
  token: Token
  amount: BigDecimal!
  timestamp: Int!
  transaction: Transaction!
}

"""
This entity will have only one instance (id: 0), and will hold global variables required for liquidity mining rewards calculations
"""
type LiquidityMiningGlobal @entity {
  id: ID! # ID will be 0
  totalAllocationPoint: BigInt!
  totalRewardPerBlock: BigInt!
}

type LiquidityMiningAllocationPoint @entity {
  id: ID! # token address
  allocationPoint: BigInt!
  """
  Calculated as (totalRewardPerBlock * allocationPoint) / totalAllocationPoint
  """
  rewardPerBlock: BigDecimal!
  ammPoolToken: SmartToken
  lendingPoolToken: LendingPool
  poolTokenAddedTimestamp: Int!
  poolTokenUpdatedTImestamp: Int!
  poolTokenAddedBlock: Int!
  poolTokenUpdatedBlock: Int!
}