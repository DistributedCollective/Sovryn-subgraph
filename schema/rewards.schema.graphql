
"""
This entity contains the history, fees and totals regarding one users' SOV rewards
"""
type UserRewardsEarnedHistory @entity {
  id: ID! # user
  user: User!
  """
  This is the total of all EarnReward and RewardClaimed events
  """
  totalFeesAndRewardsEarned: BigDecimal!
  """
  SOV rewards earned from margin trading, but not yet claimed and vested
  Incremented by EarnReward events, and set to 0 by TokensStaked events on the LockedSOV contract
  """
  availableTradingRewards: BigDecimal!
  """
  Sum of all SOV rewards earned from margin trading.
  Incremented by EarnReward events
  """
  totalTradingRewards: BigDecimal!
  """
  Granular events for transaction where a reward is earned
  """
  rewardsEarnedHistory: [RewardsEarnedHistoryItem!] @derivedFrom(field: "user")
}

enum RewardsEarnedAction {
  """
  When a SOV Staker withdraws their liquid SOV reward for staking
  """
  StakingRewardWithdrawn
  """
  SOV reward earned when a user margin trades or one of their trades is rolled over.
  The reward is a percentage of the trading fee, paid in SOV.
  """
  EarnReward
  """
  When a user claims a liquidity mining reward
  """
  RewardClaimed
  """
  When SOV is staked by a Rewards vesting contract (eg after it has been claimed by the user)
  """
  RewardSovStaked
  """
  When an SOV Staker withdraws their share of the fees earned by the Protocol
  """
  UserFeeWithdrawn
}

type RewardsEarnedHistoryItem @entity {
  id: ID! # transaction hash + RewardEarnedAction
  action: RewardsEarnedAction!
  user: UserRewardsEarnedHistory!
  token: Token
  amount: BigDecimal!
  timestamp: Int!
  transaction: Transaction!
}

"""
This entity has only one instance (id: 0), and holds global variables required for liquidity mining rewards calculations
"""
type LiquidityMiningGlobal @entity {
  id: ID! # ID will be 0
  """
  Total available allocation points. This is used to calculated the reward per block for each pool token.
  See the LiquidityMiningAllocationPoint entity for more details.
  """
  totalAllocationPoint: BigInt!
  """
  Total possible SOV per block in the liquidity mining program. Not all of this has to be allocation (eg if totalRewardPerBlock = 1000, that does not mean 1000 SOV are being given to LPs per block)
  This is used to calculated the reward per block for each pool token.
  See the LiquidityMiningAllocationPoint entity for more details.
  """
  totalRewardPerBlock: BigInt!
}

type LiquidityMiningAllocationPoint @entity {
  id: ID! # token address
  allocationPoint: BigInt!
  """
  The amount of SOV earned per block by all LPs in one pool
  Calculated as (totalRewardPerBlock * allocationPoint) / totalAllocationPoint
  """
  rewardPerBlock: BigDecimal!
  """
  If this pool token is for an AMM liquidity pool, this is a foreign key to the SmartToken.
  If not, this property is null
  """
  ammPoolToken: SmartToken
  """
  If this pool token is for a lending pool, this is a foreign key to the LendingPool.
  If not, this property is null
  """
  lendingPoolToken: LendingPool
  """
  Unix timestamp for when this pool token was added to the liquidity mining program
  """
  poolTokenAddedTimestamp: Int!
  """
  Unix timestamp for when the allocation point for this pool token last changed
  """
  poolTokenUpdatedTimestamp: Int!
  poolTokenAddedBlock: Int!
  poolTokenUpdatedBlock: Int!
}