# AMM SCHEMA

"""
The ConverterRegistry registers each new AMM pool added to the Sovryn Protocol
"""
type ConverterRegistry @entity {
  """
  ID is the address of the converter registry contract
  """
  id: ID!
  """
  All the converters (AMM pools) associated with this registry
  """
  converters: [LiquidityPool!] @derivedFrom(field: "currentConverterRegistry")
  """
  All smart tokens in this registry
  """
  smartTokens: [SmartToken!] @derivedFrom(field: "currentConverterRegistry")
    """
  All ERC20 tokens in this registry
  """
  connectorTokens: [Token!] @derivedFrom(field: "currentConverterRegistry")
  """
  The contract/account that owns the registry
  """
  owner: Bytes! # address
  """
  The number of active converters (AMM pools) in this registry
  """
  numConverters: Int!
}

"""
The smart token represents a single reserve asset on a single pool. 
For V1 pools, there is 1 smart token representing both reserve assets. For V2 pools, there are 2 smart tokens, one for each reserve asset.
"""
type SmartToken @entity {
  """
  ID is smart token contract address
  """
  id: ID!
  """
  Name of the smart token (set on the contract)
  """
  name: String
  """
  Symbol for the smart token asset (set on the contract)
  """
  symbol: String
  """
  Number of decimal places for this token
  """
  decimals: Int
  """
  smartTokenType can be Relay or Liquid
  """
  smartTokenType: String # Relay, Liquid, BNT?, Others?
  """
  The AMM pool this smart token "belongs" to
  """
  liquidityPool: LiquidityPool! @derivedFrom(field: "smartToken")
  """
  connectorTokens are the entity that holds the many-to-many relationship between the underlying token asset and the smart token
  """
  connectorTokens: [TokenSmartToken!] @derivedFrom(field: "smartToken")
  """
  The contract/account that owns the SmartToken contract. This will typically be the converter registry
  """
  owner: String!
  """
  The converter registry this smart token belongs to. Can be null if token is removed from th registry
  """
  currentConverterRegistry: ConverterRegistry
  addedToRegistryBlockNumber: Int
  addedToRegistryTransactionHash: Bytes
}

"""
This entity is to store a many-to-many relationship between tokens and smart tokens
"""
type TokenSmartToken @entity {
  """
  ID is token address + smart token address
  """
  id: ID!
  """
  token is the underlying asset represented by the smartToken
  """
  token: Token!
  smartToken: SmartToken!
}

"""
For the V1 pools, the pool token and smart token are the same. However, for V2 pools, there is one pool token per asset and only one smart token for the pool.
"""
type PoolToken @entity {
  id: ID!
  name: String
  symbol: String
  decimals: Int
  liquidityPool: LiquidityPool!
  """
  For V1 pools, there will be 2 underlying assets, however for V2 pools there will be just one
  """
  underlyingAssets: [Token!]!
}

"""
The Swap entity is an aggregated entity of the individual Conversion events in a transaction.
For example, if a User swaps XUSD to SOV, there will be 2 Conversion events through 2 AMMs (XUSD-BTC and BTC-SOV) in one transaction. These two Conversions are aggregated here.
"""
type Swap @entity {
  """
  Transaction hash of this swap
  """
  id: ID!
  """
  The AMM Conversion events involved in this swap
  """
  conversions: [Conversion!] @derivedFrom(field: "swapTransaction")
  """
  The number of AMM Conversions involved in this swap (this is primarily for debugging purposes)
  """
  numConversions: Int!
  """
  Token the user converted
  """
  fromToken: Token!
  """
  Token the user received
  """
  toToken: Token!
  fromAmount: BigDecimal!
  toAmount: BigDecimal!
  """
  Rate is calculated as toAmount / fromAmount
  """
  rate: BigDecimal!
  """
  If this swap was initiated by a contract (for example as part of a Margin Trade), User will be null.
  Otherwise, this is the user that initiated the transaction.
  """
  user: User
  """
  Was this swap part of a margin trade?
  """
  isMarginTrade: Boolean!
  isBorrow: Boolean!
  """
  Was this swap a limit order?
  """
  isLimit: Boolean!
  timestamp: Int!
  transaction: Transaction!
}

"""
Granular Conversion events, exactly as they appear on the contracts.
These events are the raw data that the Swap entity and candlestick entities are built from.
"""
type Conversion @entity {
  id: ID!
  _fromToken: Token! # address
  _toToken: Token! # address
  _trader: Bytes! # address
  _amount: BigDecimal! # uint256
  _return: BigDecimal! # uint256
  _conversionFee: BigDecimal! # int256
  _protocolFee: BigDecimal! # int256
  timestamp: Int!
  emittedBy: LiquidityPool! #address
  transaction: Transaction!
  swapTransaction: Swap!
  blockNumber: Int!
}

"""
AMM Pool (sometimes referred to as a Converter)
"""
type LiquidityPool @entity {
  """
  ID is the contract address of the Converter
  """
  id: ID!
  """
  Sovryn uses Bancor V1 and Bancor V2 pools
  """
  type: Int
  version: Int
  smartToken: SmartToken
  """
  The reserve assets of this AMM Pool. The are stored here like this so that they can be accessed inside mappings when the LiquidityPool is loaded.
  """
  token0: Token
  token1: Token
  """
  The balance for each token on this liquidity pool
  NB: For the V2 pools (USDT, DOC, BPRO), this balance is the staked balance, not the contract balance
  """
  token0Balance: BigDecimal!
  token1Balance: BigDecimal!
  connectorTokens: [LiquidityPoolToken!]! @derivedFrom(field: "liquidityPool")
  poolTokens: [PoolToken!] @derivedFrom(field: "liquidityPool")
  owner: String
  """
  Divide by maxConversionFee to get percentage
  """
  conversionFee: BigInt # This is in percent if you divide by maxConversionFee
  # weight: BigDecimal
  """
  Activated with be true when this pool is activated, and will change to false is the pool is deactivated
  """
  activated: Boolean
  # hasRBTCReserve: Boolean!
  maxConversionFee: BigInt
  createdAtTimestamp: Int
  createdAtBlockNumber: Int
  createdAtTransaction: Transaction!
  currentConverterRegistry: ConverterRegistry
}

"""
This entity stores the relationship between liquidity pools and underlying tokens
It also currently stores the total volumes bought and sold, but this should be moved to the LiquidityPool
"""
type LiquidityPoolToken @entity {
  """
  ID is liquidityPool address + tokenAddress
  """
  id: ID!
  token: Token!
  liquidityPool: LiquidityPool!
  """
  The pool token that represents this token-liquidityPool relationship
  """
  poolToken: PoolToken!
  """
  Total volume of this token bought through this liquidity pool
  """
  volumeBought: BigDecimal!
  """
  Total volume of this token sold through this liquidity pool
  """
  volumeSold: BigDecimal!
  """
  Total volume of this token that has been bought or sold through this liquidity pool
  """
  totalVolume: BigDecimal!
}