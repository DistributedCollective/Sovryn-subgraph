# Loans
enum LoanType {
  """
  Trade is a loan originating from a margin trade
  """
  Trade
  """
  Borrow is a loan originating from a user simply borrowing funds
  """
  Borrow
}

"""
A Loan can be initialized by either a Margin Trade event or a Borrow event
"""
type Loan @entity {
  id: ID! # ID is LoanId
  """
  The token the loan was taken out in
  """
  loanToken: Token!
  """
  The token provided as collateral
  """
  collateralToken: Token!
  """
  LoanType is either Trade (for Margin Trades) or Borrow (for Borrows)
  """
  type: LoanType!
  """
  Unix timestamp at start of loan
  """
  startTimestamp: Int!
  """
  Unix timestamp at end of loan (null if loan is still open)
  """
  endTimestamp: Int
  """
  The amount borrowed in loan tokens
  """
  borrowedAmount: BigDecimal!
  """
  The amount borrowed when the loan was opened
  """
  startBorrowedAmount: BigDecimal!
  """
  The largest amount borrowed in the lifetime of this loan
  """
  maxBorrowedAmount: BigDecimal!

  """
  Total of collateral (user collateral in a Borrow, and user collateral + borrowed amount in a Trade) in collateral tokens
  """
  positionSize: BigDecimal!
  """
  Initial size of the position
  """
  startPositionSize: BigDecimal!
  """
  The maximum this position size was - mainly for debugging purposes
  """
  maximumPositionSize: BigDecimal!
  """
  The start rate of the loan in loan tokens (eg if it is a long USD/BTC margin trade, this is the BTC price in USD)
  """
  startRate: BigDecimal!
  """
  If a Liquidate, CloseWithSwap, Rollover or CloseWithDeposit event occurs with 0 margin or 0 leverage, this property changes to false
  """
  isOpen: Boolean!
  """
  Next date that the loan will be rolled over, interest and trading fee paid, and rollover reward paid
  It is possible for the next rollover to be in the past if the loan has not yet been rolled over by the Sovryn node
  """
  nextRollover: Int
  """
  The user who took out the loan
  """
  user: User!
  """
  Trade (margin trade) transactions associated with this loan
  """
  trade: [Trade!] @derivedFrom(field: "loanId")
  """
  Borrow transactions associated with this loan
  """
  borrow: [Borrow!] @derivedFrom(field: "loanId")
  """
  CloseWithSwap events associated with this loan. Emitted when a user partially or fully closes a margin trade.
  """
  closeWithSwaps: [CloseWithSwap!] @derivedFrom(field: "loanId")
  """
  CloseWithDeposit events associated with this loan. Emitted when a user partially or fully closes a borrow loan.
  """
  closeWithDeposits: [CloseWithDeposit!] @derivedFrom(field: "loanId")
  """
  Any liquidations that have happened on this loan
  """
  liquidates: [Liquidate!] @derivedFrom(field: "loanId")
  """
  DepositCollateral events associated with this loan, where a user has topped up collateral
  """
  depositCollateral: [DepositCollateral!] @derivedFrom(field: "loanId")
  """
  Rollover events associated with this loan.
  Rollovers are loan maintenance transactions where the next interest payment and fee is paid
  """
  rollovers: [Rollover!] @derivedFrom(field: "loanId")
  """
  Sum of position volume from Trade, Borrow and DepositCollateral events in this loan, in collateral token
  """
  totalBought: BigDecimal!
  """
  Sum of position change volume from CloseWithSwap, CloseWithDeposit and Liquidate events in this loan, in collateral token
  """
  totalSold: BigDecimal!
  """
  Average price per token from all loan open events
  Updated on Trade and Borrow events
  This is mainly used as internal storage to calculate PnL
  """
  averageBuyPrice: BigDecimal!
  """
  Average price per token from all loan close events
  Updated on CloseWithSwap, CloseWithDeposit and Liquidate events
  This is mainly used as internal storage to calculate PnL
  """
  averageSellPrice: BigDecimal!
  """
  Realized profit and loss. This is updated on every loan closing event - partially or fully closing a loan, or a liquidation.
  Currently, this does not take into account fees paid
  The realized PnL is quoted in the collateral currency
  """
  realizedPnL: BigDecimal!
  """
  Percentage profit or loss relative to collateral
  """
  realizedPnLPercent: BigDecimal!
}

"""
Granular event data for the Loan entity. Emitted when a user Borrows (takes out a loan)
"""
type Borrow @entity {
  id: ID!
  user: User! # address
  lender: Bytes! # address
  loanId: Loan! # bytes32
  loanToken: Bytes! # address
  collateralToken: Bytes! # address
  newPrincipal: BigDecimal! # uint256
  newCollateral: BigDecimal! # uint256
  interestRate: BigDecimal! # uint256
  interestDuration: BigDecimal! # uint256
  collateralToLoanRate: BigDecimal! # uint256
  currentMargin: BigDecimal! # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a user closes a loan initiated by a Borrow event
"""
type CloseWithDeposit @entity {
  id: ID!
  user: Bytes! # address
  lender: Bytes! # address
  loanId: Loan! # bytes32
  closer: Bytes! # address
  loanToken: Bytes! # address
  collateralToken: Bytes! # address
  repayAmount: BigDecimal! # uint256
  collateralWithdrawAmount: BigDecimal! # uint256
  collateralToLoanRate: BigDecimal! # uint256
  currentMargin: BigDecimal! # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a user closes a loan initiated by a Margin Trade
"""
type CloseWithSwap @entity {
  id: ID!
  user: Bytes! # address
  lender: Bytes! # address
  loanId: Loan! # bytes32
  collateralToken: Bytes! # address
  loanToken: Bytes! # address
  closer: Bytes! # address
  positionCloseSize: BigDecimal! # uint256
  loanCloseAmount: BigDecimal! # uint256
  exitPrice: BigDecimal! # uint256
  """
  Leverage on the smart contract does not count user-provided collateral.
  So, what would on the dapp be a 2x leverage trade would be a 1 here
  """
  currentLeverage: BigDecimal! # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a user closes adds collateral to a Margin Trade or Borrow
"""
type DepositCollateral @entity {
  id: ID!
  loanId: Loan! # bytes32
  depositAmount: BigDecimal! # uint256
  """
  Rate is sometimes null because this property was not included in older versions of the contract
  """
  rate: BigDecimal # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a loan is fully or partially liquidated
"""
type Liquidate @entity {
  id: ID!
  user: User! # address
  liquidator: Bytes! # address
  loanId: Loan! # bytes32
  lender: Bytes! # address
  loanToken: Bytes! # address
  collateralToken: Bytes! # address
  repayAmount: BigDecimal! # uint256
  collateralWithdrawAmount: BigDecimal! # uint256
  collateralToLoanRate: BigDecimal! # uint256
  currentMargin: BigDecimal! # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a user Borrows and when a loan is rolled over
"""
type PayBorrowingFee @entity {
  id: ID!
  payer: Bytes! # address
  token: Bytes! # address
  loanId: Loan! # bytes32
  amount: BigDecimal! # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a user Lends or Unlends and when a loan is rolled over
"""
type PayLendingFee @entity {
  id: ID!
  payer: Bytes! # address
  token: Bytes! # address
  amount: BigDecimal! # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a user Margin Trades and when a loan is rolled over
"""
type PayTradingFee @entity {
  id: ID!
  payer: Bytes! # address
  token: Bytes! # address
  loanId: Loan! # bytes32
  amount: BigDecimal! # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a user opens a Margin Trade
"""
type Trade @entity {
  id: ID!
  user: User! 
  lender: Bytes! 
  loanId: Loan! 
  collateralToken: Token! 
  loanToken: Token! 
  positionSize: BigDecimal! 
  borrowedAmount: BigDecimal! 
  interestRate: BigDecimal! 
  settlementDate: Int! 
  entryPrice: BigDecimal! 
  entryLeverage: BigDecimal! 
  currentLeverage: BigDecimal! 
  timestamp: Int!
  emittedBy: Bytes!
  transaction: Transaction!
}

"""
Granular event data for the Loan entity. Emitted when a Loan is rolled over.
This is when the next installment of interest is paid from the collateral, and the trading fee is paid
This transaction is initiated by the Sovryn node, which earns a reward for doing this
"""
type Rollover @entity {
  id: ID!
  user: User! 
  lender: Bytes! 
  loanId: Loan! 
  principal: BigDecimal! 
  collateral: BigDecimal! 
  endTimestamp: Int!
  """
  The User running the Sovryn node that made this transaction
  """ 
  rewardReceiver: User!
  """
  The reward received by the User for performing this function
  """ 
  reward: BigDecimal!
  timestamp: Int!
  emittedBy: Bytes!
  transaction: Transaction!
}