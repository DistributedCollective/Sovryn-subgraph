# PROTOCOL LEVEL ENTITIES

"""
This entity will have only one instance and will be used to store protocol-wide data like list of tokens and number or users.
The ID of this one entity is "0"
"""
type ProtocolStats @entity {
  """
  Only one entity should be created, with ID "0"
  """
  id: ID!
  """
  An array of all tokens in the protocol
  """
  tokens: [Token!]!
  """
  The token currently used as a proxy for USD/BTC prices
  """
  usdStablecoin: Token!
  """
  Current price of BTC in usdStablecoin
  """
  btcUsdPrice: BigDecimal!
  """
  Total number of users of the protocol. This number is incremented each time a user initiates a transaction with the Protocol.
  Incremented when a user interacts with any contracts tracked by this subgraph.
  Does not include the Zero, Mynt and Perperpetual Swaps users (unless they have also used the core protocol)
  """
  totalUsers: Int!
  """
  Total of positionSize property in Trade event (in usd). This includes user collateral and borrowed amount
  """
  totalMarginTradeVolumeUsd: BigDecimal!
  """
  Total position volume closed for Margin Trades (in usd)
  """
  totalCloseWithSwapVolumeUsd: BigDecimal!
  """
  Total additional collateral deposited for Margin Trades and Borrows (in usd)
  """
  totalDepositCollateralVolumeUsd: BigDecimal!
  """
  Total Margin Trade and Borrow position size that has been liquidated (in usd)
  """
  totalLiquidateVolumeUsd: BigDecimal!
  """
  Total volume that has passed through every AMM pool of the Sovryn protocol (in usd)
  """
  totalAmmVolumeUsd: BigDecimal!
  """
  Total volume of fees earned by liquidity providers to AMM pools (in usd)
  """
  totalAmmLpFeesUsd: BigDecimal!
  """
  Total volume of fees earned by SOV stakers from AMM conversion events (in usd). These fees began after the fee-sharing SIP was executed.
  """
  totalAmmStakerFeesUsd: BigDecimal!
  """
  Total fees from Margin Trading earned by SOV stakers (in usd)
  """
  totalTradingFeesUsd: BigDecimal!
  """
  Total fees from Lending and Unlending earned by SOV stakers (in usd)
  """
  totalLendingFeesUsd: BigDecimal!
  """
  Total fees from Borrowing earned by SOV stakers (in usd)
  """
  totalBorrowingFeesUsd: BigDecimal!
  """
  Total volume supplied to Lending Pools over all time (in usd)
  """
  totalLendVolumeUsd: BigDecimal!
  """
  Total volume withdrawn from Lending Pool over all time (in usd)
  """
  totalUnlendVolumeUsd: BigDecimal!
  """
  Total of collateral property in Trade event (in usd). This may be changed to borrowed amount volume, but collateral keeps it consistent with margin trading
  """
  totalBorrowVolumeUsd: BigDecimal!
  """
  Total volume of Borrows closed (in usd)
  """
  totalCloseWithDepositVolumeUsd: BigDecimal!
  """
  This is SOV staked by users (not vesting contracts). It is incremented when users stake tokens, and decremented when users withdraw tokens from the staking contract
  """
  currentVoluntarilyStakedSov: BigDecimal!
  """
  This is SOV staked by vesting contracts. It in incremented when the contracts stake the tokens, and decremented when users claim their unlocked tokens
  """
  currentStakedByVestingSov: BigDecimal!
  # """
  # NOT YET IMPLEMENTED: This will be a total of volumes of all transaction types (AMM Swaps, Margin Trades, CloseWithSwap etc etc)
  # """
  # totalTransactedVolumeUsd: Int! # TODO: Implement
}

"""
Transaction data, including hash and timestamp
"""
type Transaction @entity {
  """
  ID is transaction hash
  """
  id: ID!
  blockNumber: Int!
  """
  The timestamp the transaction was confirmed
  """
  timestamp: Int!
  gasPrice: BigInt!
  """
  The index of this transaction within the block
  """
  index: Int!
  """
  The account that initiated this transaction. This must be an Account and not a Contract.
  """
  from: User!
  """
  The contract the user interacted with
  """
  to: Bytes
  value: BigInt!
  gasLimit: BigInt!
  functionSignature: String!
}

"""
This entity represents an ERC20 token traded on the Sovryn Protocol
"""
type Token @entity {
  """
  The ID is the contract address of the token on RSK
  """
  id: ID!
  name: String
  symbol: String
  """
  Number of decimal places used in the smart contract for this token
  """
  decimals: Int
  version: Int
  """
  The addresses of the LiquidityPools where this token is a reserve asset
  """
  liquidityPools: [LiquidityPoolToken!] @derivedFrom(field: "token")
  """
  The smart tokens that have this token as an underlying asset
  """
  smartTokens: [TokenSmartToken!] @derivedFrom(field: "token")
  # tokenSwapTotals: [TokenSwapTotals!]
  """
  Internal use only - previous BTC price used for candleSticks
  """
  prevPriceBtc: BigDecimal!
  """
  lastPriceBtc is the last traded price of this token in BTC
  """
  lastPriceBtc: BigDecimal!
  """
  Internal use only - previous BTC price used for candleSticks
  """
  prevPriceUsd: BigDecimal!
  """
  lastPriceUsd is the last traded price of this token in USD
  """
  lastPriceUsd: BigDecimal!
  """
  The total volume of this token that has been traded through the protocol quoted in BTC
  """
  btcVolume: BigDecimal!
  """
  The total volume of this token that has been traded through the protocol quoted in USD
  """
  usdVolume: BigDecimal!
  """
  The total volume of this token that has been traded through the protocol
  """
  tokenVolume: BigDecimal!
  currentConverterRegistry: ConverterRegistry
  """
  Does this token have an AMM pool with rBTC as the other reserve asset?
  """
  hasBtcPool: Boolean
  """
  Does this token have an AMM pool with the protocol stablecoin as the other reserve asset?
  """
  hasStablecoinPool: Boolean

  """
  CrossTransfers: cross transfers list (currently only relevant to SOV)
  """
  crossTransfers: [CrossTransfer!] @derivedFrom(field: "token")
}

type OwnerUpdate @entity {
  id: ID!
  prevOwner: String!
  newOwner: String!
  timestamp: BigInt!
  emittedBy: String!
}

enum FeeType {
  Trading
  Lending
  Borrowing
  AMM
}

type ProtocolWithdrawFee @entity {
  """
  ID is txHash-logIndex-tokenSymbol
  """
  id: ID!
  feeType: FeeType!
  token: Token!
  amount: BigDecimal!
  amountUsd: BigDecimal!
  transaction: Transaction!
  timestamp: Int!
  emittedBy: String!
}

type PayInterestTransfer @entity {
  id: ID!
  interestToken: Token!
  lender: LendingPool!
  effectiveInterest: BigDecimal!
  transaction: Transaction!
  timestamp: Int!
  emittedBy: String!
}
