type BitcoinTransferBatchSending @entity {
  id: ID!
  bitcoinTxHash: Bytes! # bytes32
  transferBatchSize: Int! # uint8
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

type BitcoinTransferFeeChanged @entity {
  id: ID!
  baseFeeSatoshi: BigInt! # uint256
  dynamicFee: BigInt! # uint256
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

type BitcoinTransferStatusUpdated @entity {
  id: ID!
  transferId: Bytes! # bytes32
  newStatus: Int! # uint8
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

type Frozen @entity {
  id: ID!
  account: Bytes! # address
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

type NewBitcoinTransfer @entity {
  id: ID!
  transferId: Bytes! # bytes32
  btcAddress: String! # string
  nonce: BigInt! # uint256
  amountSatoshi: BigInt! # uint256
  feeSatoshi: BigInt! # uint256
  rskAddress: Bytes! # address
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

type Paused @entity {
  id: ID!
  account: Bytes! # address
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

type Unfrozen @entity {
  id: ID!
  account: Bytes! # address
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

type Unpaused @entity {
  id: ID!
  account: Bytes! # address
  timestamp: Int!
  emittedBy: Bytes! #address
  transaction: Transaction!
}

